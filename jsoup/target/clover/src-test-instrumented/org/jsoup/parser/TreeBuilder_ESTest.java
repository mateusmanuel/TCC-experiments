/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 03:52:37 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TreeBuilder_ESTest extends TreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      xmlTreeBuilder0.parse(stringReader0, "");
      xmlTreeBuilder0.runParser();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("&#xa0;");
      Parser parser0 = Parser.xmlParser();
      xmlTreeBuilder0.initialiseParse(stringReader0, "required", parser0);
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      xmlTreeBuilder0.parseFragment("", "`.ntXKyaYO@,_Y{zg{m", parser0);
      boolean boolean0 = xmlTreeBuilder0.processStartTag("`.ntXKyaYO@,_Y{zg{m", attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("c+fR$IiR8:})CH3_RR");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "c+fR$IiR8:})CH3_RR", parser0);
      boolean boolean0 = htmlTreeBuilder0.processStartTag("c+fR$IiR8:})CH3_RR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = new Document("+&$59LTr1");
      Elements elements0 = document0.getElementsByAttributeValue("@o7K!AO(8L Z", "+&$59LTr1");
      xmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      xmlTreeBuilder0.settings = parseSettings0;
      boolean boolean0 = xmlTreeBuilder0.processEndTag("String input must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.parser.TreeBuilder", parser0);
      boolean boolean0 = htmlTreeBuilder0.processEndTag("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.htmlParser();
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "org.jsoup.parser.TreeBuilder", parser0);
      assertEquals("org.jsoup.parser.TreeBuilder", document0.location());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      xmlTreeBuilder0.parseFragment("?o", "?o", parser0);
      Element element0 = xmlTreeBuilder0.currentElement();
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("#>ue ,>5qZ/8iFpz@=");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("2xI8:/kg,woa3kT", document0, "=}2Z3/@n", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.runParser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.processStartTag("", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.processStartTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.processEndTag("defer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("c+fR$IiR8:})CH3_RR");
      Parser parser0 = Parser.htmlParser();
      stringReader0.close();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parse(stringReader0, "c+fR$IiR8:})CH3_RR", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("fyn");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parse(stringReader0, "fyn", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse(pipedReader0, "", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.initialiseParse(pipedReader0, "@PskK", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.currentElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.processStartTag("href");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("c+fR$IiR8:})CH3_RR");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "c+fR$IiR8:})CH3_RR", parser0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c+fR$IiR8:})CH3_RR";
      stringArray0[2] = "c+fR$IiR8:})CH3_RR";
      stringArray0[4] = "c+fR$IiR8:})CH3_RR";
      stringArray0[5] = "x,Ui";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      CDataNode cDataNode0 = new CDataNode("`.ntXKyaYO@,_Y{zg{m");
      Attributes attributes0 = cDataNode0.attributes();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.processStartTag("`.ntXKyaYO@,_Y{zg{m", attributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }
}
