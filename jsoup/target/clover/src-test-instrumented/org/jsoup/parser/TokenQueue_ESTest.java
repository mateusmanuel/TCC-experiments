/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 03:54:52 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TokenQueue.unescape("'_+$iW,[m");
      assertEquals("'_+$iW,[m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"Qh^% )QBl}");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\"', tokenQueue0.peek());
      assertEquals("\"Qh^% )QBl}", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompBalanced('A', '\\');
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('Q', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Qh^% )QBl}", tokenQueue0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("(s'2!r(N/sK!$'2YM~$");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('(', tokenQueue0.peek());
      assertEquals("(s'2!r(N/sK!$'2YM~$", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('(', '(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 's'2!r(N/sK!$'2YM~$'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("F6+_GqH_BNlb1HgtP*=");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('F', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("F6+_GqH_BNlb1HgtP*=", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompTo("N");
      assertEquals('l', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("lb1HgtP*=", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("F6+_GqH_B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=");
      assertEquals('=', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("=", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.consume("");
      assertEquals('=', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("=", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("(UJ&t");
      assertEquals('(', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("(UJ&t", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.chompBalanced('D', '}');
      assertEquals("UJ&t", tokenQueue0.toString());
      assertEquals('U', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeWord();
      assertEquals('&', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("&t", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(string1.equals((Object)string0));
      assertEquals("UJ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('&', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("&t", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('*', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("*|", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompTo("*|");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.toString();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\tblZ}(xy>8$V/");
      assertEquals('\t', tokenQueue0.peek());
      assertEquals("\tblZ}(xy>8$V/", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.remainder();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("\tblZ}(xy>8$V/", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.remainder();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1{WD9}B&3V-f.+>[1!");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("1{WD9}B&3V-f.+>[1!", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.peek();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("1{WD9}B&3V-f.+>[1!", tokenQueue0.toString());
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.peek();
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[;<^|z");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("[;<^|z", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("[aAP_}1I0`w(Xk@8==3");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals("[;<^|z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matchesCS("[;<^|z");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matches("");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("2&vl,b*}_");
      assertEquals("2&vl,b*}_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('2', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.consume();
      assertEquals('&', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("&vl,b*}_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('j');
      assertEquals('j', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertEquals('j', tokenQueue0.peek());
      assertEquals("j                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('j', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesCS((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("          ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#X'?1|$(y>\"SZaDYP");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('#', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("#X'?1|$(y>\"SZaDYP", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("width must be > 0");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('w', tokenQueue0.peek());
      assertEquals("width must be > 0", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("sMcGO8W;1,3xk");
      assertEquals('s', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("sMcGO8W;1,3xk", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                  ");
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                  ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("F6+_GqH_BNlb1HgtP*=");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('F', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("F6+_GqH_BNlb1HgtP*=", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("2* !C:@F:&aq%Jo");
      assertEquals('2', tokenQueue0.peek());
      assertEquals("2* !C:@F:&aq%Jo", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1KqMt]Y[H|<XVpYK");
      assertEquals('1', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("1KqMt]Y[H|<XVpYK", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#tH");
      assertEquals('#', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("#tH", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("            ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("            ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1{WD9}B&3V-f.+>[1!");
      assertEquals('1', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("1{WD9}B&3V-f.+>[1!", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTagName();
      assertEquals("{WD9}B&3V-f.+>[1!", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('{', tokenQueue0.peek());
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("1{WD9}B&3V-f.+>[1!");
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(string1.equals((Object)string0));
      assertEquals("{WD9}B&3V-f.+>[1!", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("                 ");
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'R5e]>.A6Zs-)/WVd");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("'R5e]>.A6Zs-)/WVd", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('R', tokenQueue0.peek());
      assertEquals("R5e]>.A6Zs-)/WVd", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('\'', char0);
      
      String string0 = tokenQueue0.consumeTo("'R5e]>.A6Zs-)/WVd");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals("R5e]>.A6Zs-)/WVd", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTo("");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("          ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("          ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("          ", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.remainder();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("org.jsoup.parser.TokenQueue", string0);
      assertNotNull(string0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("width must be > 0");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('w', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("width must be > 0", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('w', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("width must be > 0", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("              ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("              ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1KqMt]Y[H|<XVpYK");
      assertEquals('1', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("1KqMt]Y[H|<XVpYK", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals('1', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("1KqMt]Y[H|<XVpYK", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("            ");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals("            ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(boolean0);
      
      boolean boolean1 = tokenQueue0.matchesWhitespace();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("(s'2!r(N/sK!$'2YM~$");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('(', tokenQueue0.peek());
      assertEquals("(s'2!r(N/sK!$'2YM~$", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp(")H^U#W{u;,s2");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('(', tokenQueue0.peek());
      assertEquals("(s'2!r(N/sK!$'2YM~$", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("                 ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("9^(>&GqMJ'3D)3");
      assertEquals("9^(>&GqMJ'3D)3", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('9', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompBalanced('J', 'J');
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("^(>&GqMJ'3D)3", tokenQueue0.toString());
      assertEquals('^', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9^(>&GqMJ'3D)3";
      stringArray0[1] = "9^(>&GqMJ'3D)3";
      stringArray0[2] = "9^(>&GqMJ'3D)3";
      stringArray0[3] = "nPZl$^~X%";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("^(>&GqMJ'3D)3", tokenQueue0.toString());
      assertEquals('^', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("org", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("rg");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(string1.equals((Object)string0));
      assertEquals(".jsoup.parser.TokenQueue", string1);
      assertNotNull(string1);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*mm{YjwY{DVH");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('*', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*mm{YjwY{DVH", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('*', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*mm{YjwY{DVH", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("(s'2!r(N/sK!$'2YM~$");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('(', tokenQueue0.peek());
      assertEquals("(s'2!r(N/sK!$'2YM~$", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matches("`D;KB{1v~w[");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('(', tokenQueue0.peek());
      assertEquals("(s'2!r(N/sK!$'2YM~$", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("tO-Gw@%% }U[I#q+N");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("tO-Gw@%% }U[I#q+N", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('t', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('@', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("@%% }U[I#q+N", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("tO-Gw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals('.', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(".jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertEquals("org", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("org");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals(".jsoup.parser.TokenQueue", string1);
      assertNotNull(string1);
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[;<^|z");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[;<^|z", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("[aAP_}1I0`w(Xk@8==3");
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertEquals("[;<^|z", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("-");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("-", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('-', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(".jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('.', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("org", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.consumeToIgnoreCase("org");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals(".jsoup.parser.TokenQueue", string1);
      assertNotNull(string1);
      
      String string2 = tokenQueue0.consumeElementSelector();
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":Yr'vi-zCXJ9Rf");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(":Yr'vi-zCXJ9Rf", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTagName();
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("'vi-zCXJ9Rf", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(":Yr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTagName();
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("v,_m7H&Z7y33$HJ6$T");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("v,_m7H&Z7y33$HJ6$T", tokenQueue0.toString());
      assertEquals('v', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeWord();
      assertEquals(',', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(",_m7H&Z7y33$HJ6$T", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("v", string0);
      assertNotNull(string0);
      
      String string1 = tokenQueue0.chompBalanced('4', ';');
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('_', tokenQueue0.peek());
      assertEquals("_m7H&Z7y33$HJ6$T", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("&Z7y33$HJ6$T", tokenQueue0.toString());
      assertEquals('&', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_m7H", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("              ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("'              ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      tokenQueue0.addFirst(character0);
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("''              ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', 'Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''              '
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("              ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("'              ", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompBalanced('\"', 'Y');
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("              ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      tokenQueue0.chompBalanced('o', 'j');
      assertEquals("soup.parser.TokenQueue", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parsorgtokenqueue");
      tokenQueue0.consumeCssIdentifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "r";
      stringArray0[1] = "org";
      stringArray0[2] = "org.jsoup.parsorgtokenqueue";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('r', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("&gmlY=xL.N)A1");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      tokenQueue0.consumeToAny(stringArray0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("&gmlY=xL.N)A1");
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.tokenquerg");
      tokenQueue0.consume("org.jsoup.parser.tokenquerg");
      assertEquals("", tokenQueue0.toString());
      
      String[] stringArray0 = new String[8];
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<jaJqTi'x$*4");
      tokenQueue0.advance();
      tokenQueue0.consumeToIgnoreCase("<jaJqTi'x$*4");
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[;<^|z");
      tokenQueue0.addFirst("fNo8^tG<zOg[!tX~>e");
      tokenQueue0.chompToIgnoreCase("[;<^|z");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("org_jsoup.parser.tokenqueue");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[;<^|z");
      tokenQueue0.chompToIgnoreCase("[;<^|z");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeToIgnoreCase("org");
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":Yr'vi-zCXJ9Rf");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals(':', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("]% u_s4zU");
      tokenQueue0.addFirst("<sqe>!|");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.tokenquerg");
      tokenQueue0.consume("org.jsoup.parser.tokenquerg");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      char[] charArray0 = new char[2];
      tokenQueue0.addFirst((Character) charArray0[0]);
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("\u0000org.jsoup.parser.TokenQueue", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      char[] charArray0 = new char[2];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      assertEquals("                ", tokenQueue0.toString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|";
      stringArray0[1] = "_";
      stringArray0[2] = "                ";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
      tokenQueue0.consumeElementSelector();
      char[] charArray0 = new char[2];
      tokenQueue0.consumeToIgnoreCase("org");
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.chompTo("*|");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      String string0 = tokenQueue0.toString();
      assertEquals("*|", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[;<^|z");
      boolean boolean0 = tokenQueue0.matchesCS("[;<^|z");
      assertTrue(boolean0);
  }
}
